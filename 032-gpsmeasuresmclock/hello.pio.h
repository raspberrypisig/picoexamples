// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// countedges //
// ---------- //

#define countedges_wrap_target 0
#define countedges_wrap 7

static const uint16_t countedges_program_instructions[] = {
            //     .wrap_target
    0xa02b, //  0: mov    x, !null                   
    0x20c7, //  1: wait   1 irq, 7                   
    0x00c4, //  2: jmp    pin, 4                     
    0x0042, //  3: jmp    x--, 2                     
    0xa0c9, //  4: mov    isr, !x                    
    0x8020, //  5: push   block                      
    0xc006, //  6: irq    nowait 6                   
    0x0007, //  7: jmp    7                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program countedges_program = {
    .instructions = countedges_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config countedges_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + countedges_wrap_target, offset + countedges_wrap);
    return c;
}

static inline void countedges_program_init(PIO pio, uint sm, uint offset, uint jmp_pin) {
    pio_sm_config c = countedges_program_get_default_config(offset);
    sm_config_set_jmp_pin(&c, jmp_pin);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    //pio_sm_set_enabled(pio, sm, true);
}

#endif

// ---- //
// gate //
// ---- //

#define gate_wrap_target 0
#define gate_wrap 8

static const uint16_t gate_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0x20a0, //  1: wait   1 pin, 0                   
    0xc007, //  2: irq    nowait 7                   
    0x2020, //  3: wait   0 pin, 0                   
    0x20a0, //  4: wait   1 pin, 0                   
    0xe001, //  5: set    pins, 1                    
    0x20c6, //  6: wait   1 irq, 6                   
    0xe000, //  7: set    pins, 0                    
    0x0008, //  8: jmp    8                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program gate_program = {
    .instructions = gate_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config gate_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + gate_wrap_target, offset + gate_wrap);
    return c;
}

static inline void gate_program_init(PIO pio, uint sm, uint offset, uint in_pin, uint set_pin) {
    pio_gpio_init(pio, set_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, set_pin, 1, true);
    pio_sm_config c = gate_program_get_default_config(offset);
    sm_config_set_in_pins(&c, in_pin);
    sm_config_set_set_pins(&c, set_pin, 1);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

