// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// halfmeg //
// ------- //

#define halfmeg_wrap_target 0
#define halfmeg_wrap 10

static const uint16_t halfmeg_program_instructions[] = {
            //     .wrap_target
    0xbe42, //  0: nop                           [30]
    0xbe42, //  1: nop                           [30]
    0xbe42, //  2: nop                           [30]
    0xbe42, //  3: nop                           [30]
    0xe001, //  4: set    pins, 1                    
    0xbe42, //  5: nop                           [30]
    0xbe42, //  6: nop                           [30]
    0xbe42, //  7: nop                           [30]
    0xbe42, //  8: nop                           [30]
    0xe000, //  9: set    pins, 0                    
    0x000a, // 10: jmp    10                         
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program halfmeg_program = {
    .instructions = halfmeg_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config halfmeg_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + halfmeg_wrap_target, offset + halfmeg_wrap);
    return c;
}

static inline void halfmeg_program_init(PIO pio, uint sm, uint offset, uint set_pin) {
    pio_sm_config c = halfmeg_program_get_default_config(offset);
    sm_config_set_set_pins(&c, set_pin, 1);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

