// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// waitforirq //
// ---------- //

#define waitforirq_wrap_target 0
#define waitforirq_wrap 4

static const uint16_t waitforirq_program_instructions[] = {
            //     .wrap_target
    0x20c7, //  0: wait   1 irq, 7                   
    0xe035, //  1: set    x, 21                      
    0xa0c1, //  2: mov    isr, x                     
    0x8020, //  3: push   block                      
    0x0004, //  4: jmp    4                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program waitforirq_program = {
    .instructions = waitforirq_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config waitforirq_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + waitforirq_wrap_target, offset + waitforirq_wrap);
    return c;
}

static inline void waitforirq_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = waitforirq_program_get_default_config(offset);
    //sm_config_set_in_pins(&c, in_pin);
    //sm_config_set_jmp_pin(&c, jmp_pin);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    //pio_sm_set_enabled(pio, sm, true);
}

#endif

// -------- //
// raiseirq //
// -------- //

#define raiseirq_wrap_target 0
#define raiseirq_wrap 2

static const uint16_t raiseirq_program_instructions[] = {
            //     .wrap_target
    0xbe42, //  0: nop                           [30]
    0xc007, //  1: irq    nowait 7                   
    0x0002, //  2: jmp    2                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program raiseirq_program = {
    .instructions = raiseirq_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config raiseirq_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + raiseirq_wrap_target, offset + raiseirq_wrap);
    return c;
}

static inline void raiseirq_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = waitforirq_program_get_default_config(offset);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

